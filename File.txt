COMMON

//CONST
const float ICYCLETIME = 1./5.;
const float CYCLETIME_OFFSET = 1.;
const float I256 = 1./256.;
const float I512 = 1./512.;
const float I1024 = 1./1024.;

//DEFINE
#define RES iResolution.xy
#define IRES 1./iResolution.xy
#define ASPECT vec2(iResolution.x/iResolution.y,1.)

//STRUCT
struct HIT { float t; vec2 uv; vec2 uvo; vec2 res; vec3 n; vec3 c; };

//SDF
vec2 Rotate2(vec2 p, float ang) {
    //Rotates p *ang* radians
    float c = cos(ang);
    float s = sin(ang);
    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);
}

vec2 Repeat2(vec2 p, float n) {
    //Repeats p in a PI*2/n segment
    float ang = 2.*3.141592653/n;
    float sector = floor(atan(p.x, p.y)/ang + 0.5);
    return Rotate2(p, sector*ang);
}

float DFBox(vec2 p, vec2 b) {
    //Distance field to box
    vec2 d = abs(p - b*0.5) - b*0.5;
    return min(max(d.x, d.y), 0.) + length(max(d, 0.));
}

float DFBox(vec3 p, vec3 b) {
    //Distance field to box
    vec3 d = abs(p - b*0.5) - b*0.5;
    return min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));
}

//ANIMATED
vec3 GetSkyLight(vec3 d) {
    //Sky light function
    return vec3(0.7, 0.8, 1.)*(1. - d.y*0.5);
}

vec3 GetSunLight(float t) {
    //Sun light function
    float nt = CYCLETIME_OFFSET + t*ICYCLETIME;
    return vec3(1., 0.9, 0.65)*2.5;
}

vec3 GetSunDirection(float t) {
    //Sun direction function
    float nt = CYCLETIME_OFFSET + t*ICYCLETIME;
    return normalize(vec3(-sin(nt*2.4), 1., -cos(nt*2.4)));
}

bool InteriorIntersection(vec3 p) {
    //Intersection function when tracing interior wall
    if (length(p.xy - vec2(0.5, 0.)) < 0.25) return true;
    if (length(p.xy - vec2(0.87, 0.25)) < 0.12) return true;
    return false;
}

bool DFIntersection(vec3 p, float t) {
    //Intersection function when tracing geometry
    float nt = CYCLETIME_OFFSET + t*ICYCLETIME;
    
    vec3 rp = p - vec3(0.21 + (sin(nt)*0.5 + 0.5)*0.58, 0.5, 0.21 + (cos(nt)*0.5 + 0.5)*0.58);
    vec2 rep = Repeat2(rp.xz, 8.);
    float r = length(rp.xz);
    if (p.y > 0.49 && abs(p.z - 0.5) > 0.04 && r < 0.2 && abs(r - 0.1375) > 0.01 &&
        DFBox(vec2(rep.x + 0.01, rep.y - 0.015), vec2(0.02, 0.3)) > 0.) return true;
    
    return false;
}

//RT
vec3 AQuad(vec3 p, vec3 d, vec3 vTan, vec3 vBit, vec3 vNor, vec2 pSize) {
    //Analytic intersection of quad
    float norDot = dot(vNor, d);
    float pDot = dot(vNor, p);
    if (sign(norDot*pDot) < -0.5) {
        float t = -pDot/norDot;
        vec2 hit2 = vec2(dot(p + d*t, vTan), dot(p + d*t, vBit));
        if (DFBox(hit2, pSize) <= 0.) return vec3(hit2, t);
    }
    return vec3(-1.);
}

vec2 ABox(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {
    //Analytc intersection of box
    vec3 tMin = (bmin - origin)*dir;
    vec3 tMax = (bmax - origin)*dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    return vec2(max(max(t1.x, t1.y), t1.z), min(min(t2.x, t2.y), t2.z));
}

vec2 ABoxNormal(vec3 origin, vec3 idir, vec3 bmin, vec3 bmax, out vec3 N) {
    //Returns near/far, near normal as out
    vec3 tMin = (bmin - origin)*idir;
    vec3 tMax = (bmax - origin)*idir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    vec3 signdir = -(max(vec3(0.), sign(idir))*2. - 1.);
    if (t1.x > max(t1.y, t1.z)) N = vec3(signdir.x, 0., 0.);
    else if (t1.y > t1.z) N = vec3(0., signdir.y, 0.);
    else N = vec3(0., 0., signdir.z);
    return vec2(max(max(t1.x, t1.y), t1.z), min(min(t2.x, t2.y), t2.z));
}

float ASphere(vec3 p, vec3 d, float r) {
    //Analytic intersection of sphere
    float a = dot(p, p) - r*r;
    float b = 2.*dot(p, d);
    float re = b*b*0.25 - a;
    if (dot(p, d) < 0. && re > 0.) {
        float st = -b*0.5 - sqrt(re);
        return st;
    }
    return -1.;
}

float ACylZ(vec3 p, vec3 d, float r) {
    //Analytic intersection of cylinder along Z
    float a = (dot(p.xy, p.xy) - r*r)/dot(d.xy, d.xy);
    float b = 2.*dot(p.xy, d.xy)/dot(d.xy, d.xy);
    float re = b*b*0.25 - a;
    if (re > 0.) {
        float st = -b*0.5 + sqrt(re);
        return st;
    }
    return -1.;
}

HIT TraceRay(vec3 p, vec3 d, float maxt, float time) {
    //Ray intersection function
    HIT info = HIT(maxt, vec2(-1.), vec2(-1.), vec2(-1.), vec3(-20.), vec3(-1.));
    vec3 uvt, sp;
    vec2 bb;
    float st;
    
    //Floor
    uvt = AQuad(p, d, vec3(1., 0., 0.), vec3(0., 0., 1.), vec3(0., 1., 0.), vec2(1., 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(0., 0.), vec2(256.), vec3(0., 1., 0.), vec3(0.9));
    
    //Ceiling
    uvt = AQuad(p - vec3(0., 0.5, 0.), d, vec3(1., 0., 0.), vec3(0., 0., 1.), vec3(0., 1., 0.), vec2(1., 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(256., 0.), vec2(256.), vec3(0., -1., 0.), vec3(0.9));
    
    //Walls X 1 x 0.5
    uvt = AQuad(p, d, vec3(0., 1., 0.), vec3(0., 0., 1.), vec3(1., 0., 0.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(512., 0.), vec2(128., 256.), vec3(1., 0., 0.), vec3(0.9, 0.1, 0.1));
    uvt = AQuad(p - vec3(1., 0., 0.), d, vec3(0., 1., 0.), vec3(0., 0., 1.), vec3(-1., 0., 0.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(640., 0.), vec2(128., 256.), vec3(-1., 0., 0.), vec3(0.05, 0.95, 0.1));
    
    //Walls Z 1 x 0.5
    uvt = AQuad(p, d, vec3(0., 1., 0.), vec3(1., 0., 0.), vec3(0., 0., -1.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(768., 0.), vec2(128., 256.), vec3(0., 0., 1.), vec3(0.9));
    uvt = AQuad(p - vec3(0., 0., 1.), d, vec3(0., 1., 0.), vec3(1., 0., 0.), vec3(0., 0., -1.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !DFIntersection(p + d*uvt.z, time))
        info = HIT(uvt.z, uvt.xy, vec2(896., 0.), vec2(128., 256.), vec3(0., 0., -1.), vec3(0.9));
    
    //Interior wall
    uvt = AQuad(p - vec3(0., 0., 0.47 - 1./256.), d, vec3(0., 1., 0.), vec3(1., 0., 0.), vec3(0., 0., -1.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !InteriorIntersection(p + d*uvt.z))
        info = HIT(uvt.z, uvt.xy, vec2(0., 1536), vec2(128., 256.), vec3(0., 0., -1.), vec3(0.99));
    uvt = AQuad(p - vec3(0., 0., 0.53 - 1./256.), d, vec3(0., 1., 0.), vec3(1., 0., 0.), vec3(0., 0., -1.), vec2(0.5, 1.));
    if (uvt.z > -0.5 && uvt.z < info.t && !InteriorIntersection(p + d*uvt.z))
        info = HIT(uvt.z, uvt.xy, vec2(128., 1536.), vec2(128., 256.), vec3(0., 0., 1.), vec3(0.99));
    sp = p - vec3(0.5, 0., 0.);
    st = ACylZ(sp, d, 0.25);
    if (st > 0. && st < info.t && sp.z + d.z*st >= 0.47 - 1./256. && sp.z + d.z*st <= 0.53 - 1./256.)
        info = HIT(st, vec2(1.), vec2(-1.), vec2(-1.), vec3(-normalize(sp.xy + d.xy*st), 0.), vec3(0.));
    sp = p - vec3(0.87, 0.25, 0.);
    st = ACylZ(sp, d, 0.12);
    if (st > 0. && st < info.t && sp.z + d.z*st >= 0.47 - 1./256. && sp.z + d.z*st <= 0.53 - 1./256.)
        info = HIT(st, vec2(1.), vec2(-1.), vec2(-1.), vec3(-normalize(sp.xy + d.xy*st), 0.), vec3(0.));
    
    
    //Mirror sphere
    sp = p - vec3(0.15, 0.1005, 0.3);
    st = ASphere(sp, d, 0.1);
    if (st > -0.5 && st < info.t) info = HIT(st, vec2(1.), vec2(-1.), vec2(-1.), normalize(sp + d*st), vec3(-2.));
    
    //Mirror box
    vec3 sn;
    vec3 sd = d;
    sp = p - vec3(0.86, 0.14, 0.86);
    sd = normalize(sd);
    bb = ABoxNormal(sp, 1./sd, vec3(-0.08), vec3(0.08), sn);
    if (bb.x > 0. && bb.y > bb.x && bb.x < info.t) {
        info = HIT(bb.x, vec2(1.), vec2(-1.), vec2(-1.), normalize(sn), vec3(-2.));
    }
    
    return info;
}

//MATH
mat3 TBN(vec3 N) {
    //Naive TBN matrix creation
    vec3 Nb, Nt;
    if (abs(N.y) > 0.999) {
        Nb = vec3(1., 0., 0.);
        Nt = vec3(0., 0., 1.);
    } else {
    	Nb = normalize(cross(N, vec3(0., 1., 0.)));
    	Nt = normalize(cross(Nb, N));
    }
    return mat3(Nb.x, Nt.x, N.x, Nb.y, Nt.y, N.y, Nb.z, Nt.z, N.z);
}

vec3 BRDF_GGX(vec3 w_o, vec3 w_i, vec3 n, float alpha, vec3 F0) {
    //BRDF GGX
    vec3 h = normalize(w_i + w_o);
    float a2 = alpha*alpha;
    float D = a2/(3.141592653*pow(pow(dot(h, n), 2.)*(a2 - 1.) + 1., 2.));
    vec3 F = F0 + (1. - F0)*pow(1. - dot(n, w_o), 5.);
    float k = a2*0.5;
    float G = 1./((dot(n, w_i)*(1. - k)+k)*(dot(n, w_o)*(1. - k) + k));
    vec3 OUT = F*(D*G*0.25);
    return ((isnan(OUT) != bvec3(false)) ? vec3(0.) : OUT);
}

IMAGE

/*
Radiance Cascades 3D
    Combining radiance cascades with radiosity/irradiance methods
    This implementation is not perfect, see comments below :)


Cascades
    Cubemap layout
        Traces 1 ray per pixel, smallest probe is a 2x2 quad
        Like radiosity and irradiance methods, probes/rays exist on the surface of geometry -> good memory scaling
        5 cascades are used in this shader
    Ray tracing
        Rays are traced with different lengths between cascades
        Their distribution causes the resolution in phi to be a semilinear function of theta -> bins_phi = 4 + 8*theta_bin_index
    Merging
        Cascades are merged by linearly interpolating along the parent rays
        Spatial interpolation is weighted based on local visibility, approximated by the probes traced rays
    Primary ray sampling
        Uses normal bilinear interpolation when reading the cascades


Flickering
    A consequence of (mainly) temporally merging cascades and static probe positions


Light leaking from interpolation
    This implementation samples the smallest probes using naive bilinear interpolation, leading
    to some light leaking close to geometry
        A solution is to use weighted interpolation here as well


This implementation is pretty simple and should be extended:
    Dynamic probe positions
        Moving/complex geometry/light can cause spikes/flickering with static probes
        A solution like RTXGI could work as an example
    Can be extended to integrate more complex BRDFs
        An idea is to importance sample both ray directions and probe positions based on screen space BRDF changes
        Otherwise hgih frequency detail would be blurred away


Feedback is welcome! :)


Controls
    Press and move mouse in x-axis to control camera
*/

vec4 TextureCube(vec2 uv, float lod) {
    //Samples the cubemap
    float tcSign = -mod(floor(uv.y*I1024), 2.)*2. + 1.;
    vec3 tcD = vec3(vec2(uv.x, mod(uv.y, 1024.))*I512 - 1., tcSign);
    if (uv.y > 4096.) tcD = tcD.xzy;
    else if (uv.y > 2048.) tcD = tcD.zxy;
    return textureLod(iChannel3, tcD, lod);
}

vec3 AcesFilm(vec3 x) {
    //Aces film curve
    return clamp((x*(2.51*x + 0.03))/(x*(2.43*x + 0.59) + 0.14), 0., 1.);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec3 Color = vec3(0.);
    vec3 sunDir = GetSunDirection(iTime);
    vec3 sunLight = GetSunLight(iTime);
    
    float nt = CYCLETIME_OFFSET + iTime*ICYCLETIME;
    if (iMouse.z > 0.) nt = nt*0. + (iMouse.x - iMouse.z)*2./(iResolution.x*ICYCLETIME);
    float cycleTime = (nt - CYCLETIME_OFFSET)*2.;
    vec3 pPos = vec3(0.5, 0.2, 0.2 + (cos(cycleTime)*0.5 + 0.5)*0.6);
    float sunA = nt*2.4;
    vec3 pEyeTarget = vec3(sin(sunA)*0.5 + 0.5, 0.1, cos(sunA)*0.5 + 0.5);
    vec3 pEye = normalize(pEyeTarget - pPos);
    vec3 pDir = normalize(vec3((fragCoord*IRES*2. - 1.)*ASPECT, 1.)*TBN(pEye));
    
    HIT rayHit = TraceRay(pPos, pDir, 1000000., iTime);
    if (rayHit.n.x > -15.) {
        if (rayHit.c.x < -1.5) {
            //Reflective
            vec3 rDir = reflect(pDir, rayHit.n);
            HIT rayHit2 = TraceRay(pPos + pDir*rayHit.t + rayHit.n*0.001, rDir, 1000000., iTime);
            if (rayHit2.n.x > -15.) {
                if (rayHit.c.x > 1.) {
                    //Emissive
                    Color += rayHit.c;
                } else if (dot(rayHit2.n, rDir) < 0.) {
                    vec2 suv = clamp(rayHit2.uv*128., vec2(0.5), rayHit2.res*0.5 - 0.5) + rayHit2.uvo;
                    Color = TextureCube(suv, 0.).xyz + TextureCube(suv + vec2(rayHit2.res.x*0.5, 0.), 0.).xyz +
                            TextureCube(suv + vec2(0., rayHit2.res.y*0.5), 0.).xyz + TextureCube(suv + rayHit2.res*0.5, 0.).xyz;
                    
                    //Sunlight
                    vec3 sPos = pPos + pDir*rayHit.t + rayHit.n*0.001 + rDir*rayHit2.t + rayHit2.n*0.001;
                    if (dot(rayHit2.n, sunDir) > 0.) {
                        if (TraceRay(sPos, sunDir, 10000., iTime).n.x < -1.5) Color += sunLight*dot(rayHit2.n, sunDir);
                    }

                    //Color
                    Color *= rayHit2.c;
                }
            } else {
                Color = GetSkyLight(rDir);
            }
        } else if (rayHit.c.x > 1.) {
            //Emissive
            Color += rayHit.c;
        } else {
            if (dot(rayHit.n, pDir) < 0.) {
                vec2 suv = clamp(rayHit.uv*128., vec2(0.5), rayHit.res*0.5 - 0.5) + rayHit.uvo;
                Color = TextureCube(suv, 0.).xyz + TextureCube(suv + vec2(rayHit.res.x*0.5, 0.), 0.).xyz +
                        TextureCube(suv + vec2(0., rayHit.res.y*0.5), 0.).xyz + TextureCube(suv + rayHit.res*0.5, 0.).xyz;
            
                //Sunlight
                vec3 sPos = pPos + pDir*rayHit.t + rayHit.n*0.001;
                if (dot(rayHit.n, sunDir) > 0.) {
                    if (TraceRay(sPos, sunDir, 10000., iTime).n.x < -1.5) Color += sunLight*dot(rayHit.n, sunDir);
                }

                //Color
                Color *= rayHit.c;
            }
        }
    } else {
        Color = GetSkyLight(pDir);
    }
    
    
    //Visualize cubemap
    //Color = TextureCube(floor(fragCoord) + 0.5 + vec2(0., max(0., iMouse.y - 100.)*IRES.y*2000.*1. + 243.*0.), 0.).xyz;
    
    
    fragColor = vec4(pow(AcesFilm(max(vec3(0.), Color)), vec3(0.45)), 1.);
}

CUBE

//Cascades and merging

vec4 TextureCube(vec2 uv) {
    //Samples the cubemap
    float tcSign = -mod(floor(uv.y*I1024), 2.)*2. + 1.;
    vec3 tcD = vec3(vec2(uv.x, mod(uv.y, 1024.))*I512 - 1., tcSign);
    if (uv.y > 4096.) tcD = tcD.xzy;
    else if (uv.y > 2048.) tcD = tcD.zxy;
    return textureLod(iChannel3, tcD, 0.);
}

vec4 TextureCube(vec2 uv, float lod) {
    //Samples the cubemap
    float tcSign = -mod(floor(uv.y*I1024), 2.)*2. + 1.;
    vec3 tcD = vec3(vec2(uv.x, mod(uv.y, 1024.))*I512 - 1., tcSign);
    if (uv.y > 4096.) tcD = tcD.xzy;
    else if (uv.y > 2048.) tcD = tcD.zxy;
    return textureLod(iChannel3, tcD, lod);
}

vec4 WeightedSample(vec2 luvo, vec2 luvd, vec2 luvp, vec2 uvo, vec3 probePos,
                    vec3 gTan, vec3 gBit, vec3 gPos, float lProbeSize) {
    //Approximate probe visibility weighting (flatland assumption)
    vec3 lastProbePos = gPos + gTan*(luvp.x*lProbeSize/256.) + gBit*(luvp.y*lProbeSize/256.);
    vec3 relVec = probePos - lastProbePos;
    float theta = (lProbeSize*0.5 - 0.5)/(lProbeSize*0.5)*3.141592653*0.5;
    float phi = atan(-dot(relVec, gTan), -dot(relVec, gBit));
    float phiI = floor((phi/3.141592653*0.5 + 0.5)*(4. + 8.*(lProbeSize*0.5 - 1.))) + 0.5;
    vec2 phiUV;
    float phiLen = lProbeSize - 1.;
    if (phiI < phiLen) phiUV = vec2(lProbeSize - 0.5, lProbeSize - phiI);
    else if (phiI < phiLen*2.) phiUV = vec2(lProbeSize - (phiI - phiLen), 0.5);
    else if (phiI < phiLen*3.) phiUV = vec2(0.5, phiI - phiLen*2.);
    else phiUV = vec2(phiI - phiLen*3., lProbeSize - 0.5);
    float lProbeRayDist = TextureCube(luvo + floor(phiUV)*uvo + luvp).w;
    if (lProbeRayDist < -0.5 || length(relVec) < lProbeRayDist*cos(3.141592653*0.5 - theta) + 0.01) {
        vec2 luv = luvo + luvd + clamp(luvp, vec2(0.5), uvo - 0.5);;
        return vec4(TextureCube(luv).xyz + TextureCube(luv + vec2(uvo.x, 0.)).xyz +
                    TextureCube(luv + vec2(0., uvo.y)).xyz + TextureCube(luv + uvo).xyz, 1.);
    }
    return vec4(0.);
}

void mainCubemap(out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir) {
    vec4 Output = texture(iChannel3, rayDir);
    vec2 UV; vec3 aDir = abs(rayDir);
    if (aDir.z > max(aDir.x, aDir.y)) {
        //Z-side
        UV = floor(((rayDir.xy/aDir.z)*0.5 + 0.5)*1024.) + 0.5;
        if (rayDir.z < 0.) UV.y += 1024.;
    } else if (aDir.x > aDir.y) {
        //X-side
        UV = floor(((rayDir.yz/aDir.x)*0.5 + 0.5)*1024.) + 0.5;
        if (rayDir.x > 0.) UV.y += 2048.;
        else UV.y += 3072.;
    } else {
        //Y-side
        UV = floor(((rayDir.xz/aDir.y)*0.5 + 0.5)*1024.) + 0.5;
        if (rayDir.y > 0.) UV.y += 4096.;
        else UV.y += 5120.;
    }
    if (DFBox(UV, vec2(1024., (256.*6.)*2.)) < 0.) {
        //Cascades
        Output = vec4(0.); 
        vec2 gRes;
        vec3 gTan, gBit, gNor, gPos;
        
        //Hardcoded geometry
        if (UV.y < 256.*6.) {
            if (UV.x < 256.) {
                gTan = vec3(1., 0., 0.);
                gBit = vec3(0., 0., 1.);
                gNor = vec3(0., 1., 0.);
                gPos = vec3(0., 0., 0.);
                gRes = vec2(256.);
            } else if (UV.x < 512.) {
                gTan = vec3(1., 0., 0.);
                gBit = vec3(0., 0., 1.);
                gNor = vec3(0., -1., 0.);
                gPos = vec3(0., 0.5, 0.);
                gRes = vec2(256.);
            } else if (UV.x < 640.) {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(0., 0., 1.);
                gNor = vec3(1., 0., 0.);
                gPos = vec3(0., 0., 0.);
                gRes = vec2(128., 256.);
            } else if (UV.x < 768.) {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(0., 0., 1.);
                gNor = vec3(-1., 0., 0.);
                gPos = vec3(1., 0., 0.);
                gRes = vec2(128., 256.);
            } else if (UV.x < 896.) {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(1., 0., 0.);
                gNor = vec3(0., 0., 1.);
                gPos = vec3(0., 0., 0.);
                gRes = vec2(128., 256.);
            } else {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(1., 0., 0.);
                gNor = vec3(0., 0., -1.);
                gPos = vec3(0., 0., 1.);
                gRes = vec2(128., 256.);
            }
        } else {
            if (UV.x < 128.) {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(1., 0., 0.);
                gNor = vec3(0., 0., -1.);
                gPos = vec3(0., 0., 0.47 - 1./256.);
                gRes = vec2(128., 256.);
            } else if (UV.x < 256.) {
                gTan = vec3(0., 1., 0.);
                gBit = vec3(1., 0., 0.);
                gNor = vec3(0., 0., 1.);
                gPos = vec3(0., 0., 0.53 - 1./256.);
                gRes = vec2(128., 256.);
            }
        }
        
        //Probe ray distribution
        vec3 sunDir = GetSunDirection(iTime);
        vec3 sunLight = GetSunLight(iTime);
        vec2 modUV = mod(UV, gRes);
        float probeCascade = floor(mod(UV.y, 1536.)/256.);
        float probeSize = pow(2., probeCascade + 1.);
        vec2 probePositions = gRes/probeSize;
        vec3 probePos = gPos + mod(modUV.x, probePositions.x)*probeSize/256.*gTan +
                               mod(modUV.y, probePositions.y)*probeSize/256.*gBit;
        vec2 probeUV = floor(modUV/probePositions) + 0.5;
        vec2 probeRel = probeUV - probeSize*0.5;
        float probeThetai = max(abs(probeRel.x), abs(probeRel.y));
        float probeTheta = probeThetai/probeSize*3.14192653;
        float probePhi = 0.;
        if (probeRel.x + 0.5 > probeThetai && probeRel.y - 0.5 > -probeThetai) {
            probePhi = probeRel.x - probeRel.y;
        } else if (probeRel.y - 0.5 < -probeThetai && probeRel.x - 0.5 > -probeThetai) {
            probePhi = probeThetai*2. - probeRel.y - probeRel.x;
        } else if (probeRel.x - 0.5 < -probeThetai && probeRel.y + 0.5 < probeThetai) {
            probePhi = probeThetai*4. - probeRel.x + probeRel.y;
        } else if (probeRel.y + 0.5 > probeThetai && probeRel.x + 0.5 < probeThetai) {
            probePhi = probeThetai*8. - (probeRel.y - probeRel.x);
        }
        probePhi = probePhi*3.141592653*2./(4. + 8.*floor(probeThetai));
        vec3 probeDir = vec3(vec2(sin(probePhi), cos(probePhi))*sin(probeTheta), cos(probeTheta));
        probeDir = probeDir.x*gTan + probeDir.y*gBit + probeDir.z*gNor;
        
        //RT
        float tInterval = (1./64.)*probeSize*2.;
        if (probeCascade > 4.5) tInterval = 10000.;
        HIT rayHit = TraceRay(probePos + gNor*0.001, probeDir, tInterval, iTime);
        if (rayHit.n.x > -1.5) {
            Output.w = rayHit.t;
            if (rayHit.c.x < -1.5) {
                //Reflective
                    //Do nothing
            } else if (rayHit.c.x > 1.) {
                //Emissive
                Output.xyz += rayHit.c;
            } else {
                //Geo
                if (dot(rayHit.n, probeDir) < 0.) {
                    //*
                    //Bounce light
                    vec2 suv = clamp(rayHit.uv*128., vec2(0.5), rayHit.res*0.5 - 0.5) + rayHit.uvo;
                    Output.xyz = TextureCube(suv, 0.).xyz + TextureCube(suv + vec2(rayHit.res.x*0.5, 0.), 0.).xyz +
                                 TextureCube(suv + vec2(0., rayHit.res.y*0.5), 0.).xyz + TextureCube(suv + rayHit.res*0.5, 0.).xyz;
                    //*/
                    
                    //Sunlight
                    vec3 sNor = rayHit.n;
                    vec3 sPos = probePos + gNor*0.001 + probeDir*rayHit.t + sNor*0.001;
                    if (dot(sNor, sunDir) > 0.) {
                        if (TraceRay(sPos, sunDir, 10000., iTime).n.x < -1.5) Output.xyz += sunLight*dot(sNor, sunDir);
                    }

                    //Color
                    Output.xyz *= rayHit.c;
                }
            }
        } else {
            //Sky
            Output.w = -1.;
            Output.xyz = GetSkyLight(probeDir);
        }
        
        //Hemisphere normalized area and BRDF
        Output.xyz *= (cos(probeTheta - 3.141592653/probeSize) -
                       cos(probeTheta + 3.141592653/probeSize))/(4. + 8.*floor(probeThetai));
        Output.xyz *= cos(probeTheta); //Diffuse
        
        //*
        //Merging with weighted bilinear
        if (probeCascade < 4.5) {
            float interpMinDist = (1./256.)*probeSize*1.5;
            float interpMaxInterval = interpMinDist;
            if (probeCascade < 0.5) { interpMinDist = 0.; interpMaxInterval *= 2.; }
            float l = 1. - clamp((rayHit.t - interpMinDist)/interpMaxInterval, 0., 1.);
            vec2 uvo = probePositions*0.5;
            vec2 lPUVOrigin = floor(UV/gRes)*gRes + vec2(0., gRes.y);
            vec2 lPUVDirs = floor(modUV/probePositions)*probePositions;
            vec2 lPUVPos = clamp(mod(modUV, probePositions)*0.5, vec2(0.5), uvo - 0.5);
            vec2 fPUVPos = fract(lPUVPos - 0.5);
            vec2 flPUVPos = floor(lPUVPos - 0.5) + 0.5;
            vec4 S0 = WeightedSample(lPUVOrigin, lPUVDirs, flPUVPos,
                                     uvo, probePos, gTan, gBit, gPos, probeSize*2.);
            vec4 S1 = WeightedSample(lPUVOrigin, lPUVDirs, flPUVPos + vec2(1., 0.),
                                     uvo, probePos, gTan, gBit, gPos, probeSize*2.);
            vec4 S2 = WeightedSample(lPUVOrigin, lPUVDirs, flPUVPos + vec2(0., 1.),
                                     uvo, probePos, gTan, gBit, gPos, probeSize*2.);
            vec4 S3 = WeightedSample(lPUVOrigin, lPUVDirs, flPUVPos + 1.,
                                     uvo, probePos, gTan, gBit, gPos, probeSize*2.);
            vec3 lastOutput = mix(mix(S0.xyz, S1.xyz, fPUVPos.x), mix(S2.xyz, S3.xyz, fPUVPos.x), fPUVPos.y)/
                              max(0.01, mix(mix(S0.w, S1.w, fPUVPos.x), mix(S2.w, S3.w, fPUVPos.x), fPUVPos.y));
            if (!isnan(lastOutput.x)) //TMP fix
                Output.xyz = Output.xyz*l + lastOutput*(1. - l);
        }
        //*/
        
        /*
        //Merging with normal bilinear
        if (probeCascade < 4.5) {
            float interpMinDist = (1./256.)*probeSize*1.5;
            float interpMaxInterval = interpMinDist;
            if (probeCascade < 0.5) { interpMinDist = 0.; interpMaxInterval *= 2.; }
            float l = 1. - clamp((rayHit.t - interpMinDist)/interpMaxInterval, 0., 1.);
            vec2 uvo = probePositions*0.5;
            vec2 lastProbeUV = floor(UV/gRes)*gRes + vec2(0., gRes.y) + 
                               floor(modUV/probePositions)*probePositions +
                               clamp(mod(modUV, probePositions)*0.5, vec2(0.5), uvo - 0.5);
            vec4 lastOutput = TextureCube(lastProbeUV) + TextureCube(lastProbeUV + vec2(uvo.x, 0.)) +
                              TextureCube(lastProbeUV + vec2(0., uvo.y)) + TextureCube(lastProbeUV + uvo);
            Output.xyz = Output.xyz*l + lastOutput.xyz*(1. - l);
        }
        //*/
    }
    fragColor = Output;
}